package com.example.dashboardmanagement.service;

import com.example.dashboardmanagement.model.User;
import com.example.dashboardmanagement.repository.UserRepo;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.security.Key;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

@Service
public class JwtService {


    @Autowired
    private UserRepo userRepo;

    // our private key to verify the signature
    private String secretKey;




    public JwtService(){
        try{
            KeyGenerator keyGen = KeyGenerator.getInstance("HmacSHA256");
            SecretKey sk = keyGen.generateKey();
            this.secretKey= Base64.getEncoder().encodeToString(sk.getEncoded());

        }
        catch(Exception e){
            System.out.println(e.getMessage());

        }




    }

    // generate Jwt Token  " Headers.Payload.Signature"

    @Transactional
    public String generateToken(String username) {

        Map<String,Object> claims = new HashMap<>();
        User user=userRepo.findByUsername(username).orElseThrow(()->new UsernameNotFoundException(username));

        claims.put("authorities", user.getGroups().stream()
                        .flatMap(group->group.getAuthorities().stream())
                .map(auth->"PERM_"+ auth.getName())
                .distinct()
                .collect(Collectors.toList())
        );

        // jwts is Applying subject,issue,expire claims to our Map above
        // signature key is generated by methode getKey()
        return Jwts.builder()
                .claims()
                .add(claims)
                .subject(username)
                .issuedAt(new Date(System.currentTimeMillis()))
                // 10 Hours
                .expiration(new Date(System.currentTimeMillis() + 60*60 *1000*10))
                .and()
                .signWith(getKey())
                .compact();

    }


    // our signature key
    @Transactional
    public SecretKey getKey(){

        byte[] bytesKey=Base64.getDecoder().decode(secretKey);
        return Keys.hmacShaKeyFor(bytesKey);



    }

    @Transactional
    public String extractUsername(String token){

        return extractClaim(token, claims->claims.getSubject());
    }


    // it's just like translater of Jwt Token to normal text , and it verifies it with our SecretKey
    // example: user Send Request with jwt Token , to extract infos from token we use this method, and each token has a signature which is our SecretKey
    private Claims extractAllClaims(String token){
        return Jwts.parser()
                .verifyWith(getKey())
                .build()
                .parseSignedClaims(token)
                .getPayload();
    }

    private <T> T extractClaim(String token, Function<Claims,T>  claimsResolver){
        final Claims claims = extractAllClaims(token);

        return claimsResolver.apply(claims);
    }

    private Date extractExpirationDate(String token){
        return extractClaim(token, Claims::getExpiration);

    }

    public boolean isTokenExpired(String token){
        return extractExpirationDate(token).before(new Date());
    }

    public boolean validateToken(String token, UserDetails userDetails){
        String username=extractUsername(token);
        return(username.equals(userDetails.getUsername()) && !isTokenExpired(token));
    }

    @Transactional
    public List<String> extractAuthorities(String token){
        Claims claims = extractAllClaims(token);
        return claims.get("authorities", List.class);
    }

}
